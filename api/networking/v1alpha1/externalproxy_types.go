/*
Copyright 2024 Jayson Wang.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ExternalProxySpec defines the desired state of ExternalProxy
type ExternalProxySpec struct {
	// Backend defines the endpoint to which the traffic will be forwarded to.
	//
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MinItems:=1
	Backends []ExternalProxyBackend `json:"backends"`

	// The service is a generalized description of the destination endpoint of the
	// traffic, containing the ingress port number of the traffic and the corresponding
	// backend port number or name.
	//
	// If the content of the service is not defined, a Service of type ClusterIP is automatically
	// generated based on the configuration in Backends.
	//
	// If Service is configured manually, the names of all defined ports must be unique and match
	// the port names in Backends, otherwise forwarding will not be possible. The name can be omitted
	// if there is only one port.
	//
	// You can configure only the name, metadata, and type of the Service. Leaving the port information
	// blank will be automatically generated by the controller.
	//
	// +optional
	// +kubebuilder:validation:Optional
	Service ExternalProxyService `json:"service,omitempty"`

	// Optional Ingress configuration that declares how the proxied service
	// will be accessed externally via HTTP(s).
	//
	// +optional
	// +kubebuilder:validation:Optional
	Ingress *ExternalProxyIngress `json:"ingress,omitempty"`
}

// ExternalProxyBackend describes the backend address of the given proxy as well as the port.
type ExternalProxyBackend struct {
	// Addresses which offer the related ports that are marked as ready. These endpoints
	// should be considered safe for load balancers and clients to utilize.
	//
	// +listType=atomic
	// +kubebuilder:validation:Required
	Addresses []ExternalProxyBackendAddress `json:"addresses"`

	// The available port number on the related addresses.
	//
	// +listType=atomic
	// +kubebuilder:validation:Required
	Ports []corev1.EndpointPort `json:"ports"`
}

// ExternalProxyBackendAddress describes single IP address.
type ExternalProxyBackendAddress struct {
	// The IP of this endpoint.
	// May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10),
	// or link-local multicast (224.0.0.0/24 or ff02::/16).
	//
	// +kubebuilder:validation:Required
	IP string `json:"ip" protobuf:"bytes,1,opt,name=ip"`
}

// ExternalProxyService describes the saved software proxies in the cluster and the port configuration.
type ExternalProxyService struct {
	// Only metadata such as name, label and annotations are allowed to be configured, and
	// these will be copied to the created Service. No other fields are allowed and will be
	// rejected during validation.
	//
	// If you do not specify a name, the name of the ExternalProxy will be used as the
	// name of the Service by default.
	//
	// +optional
	// +kubebuilder:validation:Optional
	// +kubebuilder:pruning:PreserveUnknownFields
	// +kubebuilder:validation:Schemaless
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	//
	// +optional
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Enum:=ClusterIP;NodePort;LoadBalancer
	Type corev1.ServiceType `json:"type,omitempty"`

	// The list of ports that are exposed by this service.
	//
	// +listType=map
	// +listMapKey=port
	// +listMapKey=protocol
	Ports []corev1.ServicePort `json:"ports"`
}

// ExternalProxyIngress describes how external traffic is accessing the service to be proxied via HTTP(s).
type ExternalProxyIngress struct {
	// Only metadata such as name, label and annotations are allowed to be configured, and
	// these will be copied to the created Ingress. No other fields are allowed and will be
	// rejected during validation.
	//
	// +optional
	// +kubebuilder:validation:Optional
	// +kubebuilder:pruning:PreserveUnknownFields
	// +kubebuilder:validation:Schemaless
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// ingressClassName is the name of an IngressClass cluster resource. Ingress
	// controller implementations use this field to know whether they should be
	// serving this Ingress resource, by a transitive connection
	// (controller -> IngressClass -> Ingress resource).
	//
	// +optional
	// +kubebuilder:validation:Optional
	IngressClassName *string `json:"ingressClassName,omitempty"`

	// defaultBackend is the backend that should handle requests that don't
	// match any rule. If Rules are not specified, DefaultBackend must be specified.
	// If DefaultBackend is not set, the handling of requests that do not match any
	// of the rules will be up to the Ingress controller.
	//
	// +optional
	// +kubebuilder:validation:Optional
	DefaultBackend *ExternalProxyIngressBackend `json:"defaultBackend,omitempty"`

	// tls represents the TLS configuration. Currently, the Ingress only supports a
	// single TLS port, 443. If multiple members of this list specify different hosts,
	// they will be multiplexed on the same port according to the hostname specified
	// through the SNI TLS extension, if the ingress controller fulfilling the
	// ingress supports SNI.
	//
	// +optional
	// +kubebuilder:validation:Optional
	TLS []networkingv1.IngressTLS `json:"tls,omitempty"`

	// rules is a list of host rules used to configure the Ingress. If unspecified,
	// or no rule matches, all traffic is sent to the default backend.
	//
	// +optional
	// +listType=atomic
	// +kubebuilder:validation:Optional
	Rules []ExternalProxyIngressRule `json:"rules,omitempty"`
}

// ExternalProxyIngressRule represents the rules mapping the paths under a specified
// host to the related backend proxy services. Incoming requests are first evaluated
// for a host match, then routed to the backend associated with the matching
// ExternalProxyIngressHttpRuleValue.
type ExternalProxyIngressRule struct {
	// host is the fully qualified domain name of a network host, as defined by RFC 3986.
	//
	// Incoming requests are matched against the host before the IngressRuleValue. If the
	// host is unspecified, the Ingress routes all traffic based on the specified
	// ExternalProxyIngressHttpRuleValue.
	//
	// +optional
	// +kubebuilder:validation:Optional
	Host string `json:"host,omitempty"`

	// http represents a rule to route requests for this ExternalProxyIngressRule.
	//
	// If unspecified, the rule defaults to a http catch-all. Whether that sends
	// just traffic matching the host to the default backend or all traffic to the
	// default backend, is left to the controller fulfilling the Ingress.
	HTTP *ExternalProxyIngressHttpRuleValue `json:"http,omitempty"`
}

// ExternalProxyIngressHttpRuleValue is a list of http selectors pointing to backends.
type ExternalProxyIngressHttpRuleValue struct {
	// paths is a collection of paths that map requests to backends.
	//
	// +listType=atomic
	Paths []ExternalProxyIngressHttpPath `json:"paths"`
}

// ExternalProxyIngressHttpPath associates a path with proxied service. Incoming urls
// matching the path are forwarded to the corresponding backend.
type ExternalProxyIngressHttpPath struct {
	// path is matched against the path of an incoming request. Currently, it can
	// contain characters disallowed from the conventional "path" part of a URL
	// as defined by RFC 3986. Paths must begin with a '/' and must be present
	// when using PathType with value "Exact" or "Prefix".
	//
	// +optional
	// +kubebuilder:validation:Optional
	Path string `json:"path,omitempty"`

	// pathType determines the interpretation of the path matching. Valid
	// options are Exact, Prefix and ImplementationSpecific.
	//
	// +kubebuilder:validation:Enum:=Exact;Prefix;ImplementationSpecific
	PathType *networkingv1.PathType `json:"pathType"`

	// backend defines the referenced service port to which the traffic
	// will be forwarded to.
	//
	// This field can be ignored if only one port is configured in the service.
	//
	// +optional
	// +kubebuilder:validation:Optional
	Backend *ExternalProxyIngressBackend `json:"backend,omitempty"`
}

// ExternalProxyIngressBackend describes all endpoints for a given service and port.
type ExternalProxyIngressBackend struct {
	// port of the referenced service. A port name or port number is required.
	//
	// +optional
	// +kubebuilder:validation:Optional
	Port ExternalProxyServiceBackendPort `json:"port,omitempty"`
}

// ExternalProxyServiceBackendPort is the service port being referenced.
type ExternalProxyServiceBackendPort struct {
	// name is the name of the port on the Service.
	// This is a mutually exclusive setting with "Number".
	//
	// +optional
	// +kubebuilder:validation:Optional
	Name string `json:"name,omitempty"`

	// number is the numerical port number (e.g. 80) on the Service.
	// This is a mutually exclusive setting with "Name".
	//
	// +optional
	// +kubebuilder:validation:Optional
	Number int32 `json:"number,omitempty"`
}

// ExternalProxyStatus defines the observed state of ExternalProxy
type ExternalProxyStatus struct {
	// Ready Indicates whether the current ExternalProxy, including its subordinate
	// Services, and Ingress resources are ready.
	//
	// +optional
	// +kubebuilder:validation:Optional
	Ready bool `json:"ready"`

	// ServiceName is the name of the Service object that was finalized for use.
	//
	// +optional
	// +kubebuilder:validation:Optional
	ServiceName string `json:"serviceName"`

	// ObservedGeneration is the last generation the controller observed.
	//
	// +optional
	// +kubebuilder:validation:Optional
	ObservedGeneration int64 `json:"observedGeneration"`
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type=boolean,JSONPath=".status.ready"
// +kubebuilder:printcolumn:name="Service",type=string,JSONPath=".status.serviceName"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:categories=mobius,shortName=mep
// +kubebuilder:subresource:status

// ExternalProxy is the Schema for the externalproxies API
type ExternalProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ExternalProxySpec   `json:"spec,omitempty"`
	Status ExternalProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalProxyList contains a list of ExternalProxy
type ExternalProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExternalProxy `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ExternalProxy{}, &ExternalProxyList{})
}
